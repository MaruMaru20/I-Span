D12.-----------------------------------------------Trigge for,instead

.-----------------------------------------------for 註冊連動表:
EXEC register @uid = 'A3', @cname = '青菜',@address = 'sdsdsd'  ;

select * from userinfo
select * from house
select * from live
.-----------------------------------------------end of 註冊連動表
新手不建議用Trigge
避免遞迴發生
(直接or間接<最可怕>)
instead of 不會觸發遞迴

後悔藥begin transaction then rollback
begin transaction --啟動交易
delete from userinfo where uid = 'C01'
rollback
commit  --沒救了


exec 執行指令

@變數

@@系統變數

rowcount

disable trigger userinfo_deleted on userinfo 禁用
er all on userinfo
.-----------------------------------------------
僅能用在異動值
1.
drop trigger if exists userinfo_insert
go
create trigger userinfo_insert on userinfo for insert
as 

begin

end

2.
drop trigger if exists userinfo_insert
go
create trigger userinfo_insert on userinfo for insert
as 

begin
	declare @uid nvarchar(50)
	declare @cname nvarchar(50)
	declare @body nvarchar(200)
	select @uid = uid, @cname = cname from inserted  -- 插入指令的資料表
	select @body = concat(
	'在userinfo資料表中插入', @uid,', ',@cname, '的資料'
	)
	insert into Log (body) values (@body)
end
3.下指令後查詢
insert into UserInfo (uid,cname) 
values ('C01','David')


select * from userinfo
select *from log

.-----------------------------------------------修改2筆 禁止

drop trigger if exists userinfo_update_constrain
go
create trigger userinfo_update_constrain on userinfo for update
as 

begin
	declare @n int
	select @n = count(*) from deleted
	print @n
	--if @@rowcount > 1 and update(password)  刪除上列三行
	if @n > 1 --and update(password) --只檔pw
	begin 
		print '禁止修改超過1筆以上的資料'
		rollback --違反指令即失敗der指令
	end
end
-----------------------查詢
update userinfo set password = '1234' -- where uid = 'a01'

select * from UserInfo
.-----------------------------------------------



.-------------------------------------------------刪除檢查
drop trigger if exists userinfo_delete_instead
go
create trigger userinfo_delete_instead on userinfo instead of delete
as 

begin
	declare @uid nvarchar(50)
	select @uid = uid from deleted
	update UserInfo set isdeleted = 1, deletedat = getdate() where uid = @uid
end
指令
delete from userinfo where uid ='C01'

select* from userinfo

.-------------------------------------------------triggers檢查
select
    OBJECT_NAME(parent_id) as Table_Name, 
    *
from AddressBook.sys.triggers

.-------------------------------------------------建立procedure
1.
drop procedure if exists login
go
create procedure login
as
begin
	
end
2.
drop procedure if exists login
go
create procedure login
	@uid nvarchar(50),
	@pwd nvarchar(50)
as
begin
	declare @isok tinyint = 0
	select @isok = count(*) from userinfo where uid = @uid and password =@pwd
	select @isok as 'status'
end
指令
exec login 'A01','12346'
.-------------------------------------------------

參照DB.ipynb 製作
drop procedure if exists login
go
create procedure login
	@uid nvarchar(50),
	@pwd nvarchar(50)
as
begin
	declare @isok tinyint = 0
	select @isok = count(*) from userinfo where uid = @uid and password =@pwd
	select @isok as 'status'
end

建立帳戶(register)
先檢查帳號不能重複
設定:
帳號
密碼=預設帳號
姓名
地址


住址 從house抓屋號 沒有會有屋號


.-------------------------------------------------cursor  對應查詢

drop procedure if exists initpassword
go
create procedure initpassword as

begin
	declare c cursor for select uid, birthday from userinfo
		where isdeleted is NULL and password is NULL	--cusor一定會對應到查詢
	declare @uid nvarchar(50)
	declare @birthday datetime2
	-- 2-- while 變數宣告
	declare @pwd nvarchar(50)

	open c
	fetch c into @uid,@birthday
	-- 1-- while 檢查是否有資料
	while (@@fetch_status = 0)
	begin	
		set @pwd = concat(right(@uid, 2), format(@birthday, 'dd'))-- 缺項補0
		update userinfo set password = @pwd where uid = @uid
		fetch c into @uid,@birthday -- 第二筆
	end
	close c
	deallocate c -- 釋放記憶體
end

指令
exec initpassword

select * from userinfo

.-------------------------------------------------





















